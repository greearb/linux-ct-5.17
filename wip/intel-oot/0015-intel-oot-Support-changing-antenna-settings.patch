From 842c6eaa20f4a79b89d14657a14318c8b431ff1e Mon Sep 17 00:00:00 2001
From: Ben Greear <greearb@candelatech.com>
Date: Fri, 1 Jan 2021 07:52:49 -0800
Subject: [PATCH 15/15] intel-oot: Support changing antenna settings.

Support 'iw phy foo set_antenna 0x1'

The old code had static he_capab, so instead change that to
have a constant initial he_capab object and also a
current-in-use object that we actually use.
Then we can easily re-initialize those settings when the
antenna settings change.

Tested on ax210 against Hawkeye ath11k /AX AP.

Signed-off-by: Ben Greear <greearb@candelatech.com>
---
 .../intel-oot/iwlwifi/iwl-eeprom-parse.c      |   5 +
 .../intel-oot/iwlwifi/iwl-nvm-parse.c         | 125 ++++++++++++------
 .../intel-oot/iwlwifi/iwl-nvm-parse.h         |  11 ++
 .../wireless/intel-oot/iwlwifi/mvm/mac80211.c |   8 ++
 .../net/wireless/intel-oot/iwlwifi/mvm/mvm.h  |   2 +
 .../wireless/intel-oot/iwlwifi/mvm/utils.c    |  17 +++
 6 files changed, 128 insertions(+), 40 deletions(-)

diff --git a/drivers/net/wireless/intel-oot/iwlwifi/iwl-eeprom-parse.c b/drivers/net/wireless/intel-oot/iwlwifi/iwl-eeprom-parse.c
index f12b865637280..b1b14389d193b 100644
--- a/drivers/net/wireless/intel-oot/iwlwifi/iwl-eeprom-parse.c
+++ b/drivers/net/wireless/intel-oot/iwlwifi/iwl-eeprom-parse.c
@@ -721,8 +721,13 @@ void iwl_init_ht_hw_capab(struct iwl_trans *trans,
	ht_info->mcs.rx_mask[0] = 0xFF;
	if (rx_chains >= 2)
		ht_info->mcs.rx_mask[1] = 0xFF;
+	else
+		ht_info->mcs.rx_mask[1] = 0;
+
	if (rx_chains >= 3)
		ht_info->mcs.rx_mask[2] = 0xFF;
+	else
+		ht_info->mcs.rx_mask[2] = 0;

	if (cfg->ht_params->ht_greenfield_support)
		ht_info->cap |= IEEE80211_HT_CAP_GRN_FLD;
diff --git a/drivers/net/wireless/intel-oot/iwlwifi/iwl-nvm-parse.c b/drivers/net/wireless/intel-oot/iwlwifi/iwl-nvm-parse.c
index c210eec622329..9a6ce6b32b128 100644
--- a/drivers/net/wireless/intel-oot/iwlwifi/iwl-nvm-parse.c
+++ b/drivers/net/wireless/intel-oot/iwlwifi/iwl-nvm-parse.c
@@ -718,6 +718,28 @@ iwl_nvm_fixup_sband_iftd(struct iwl_trans *trans,
			~IEEE80211_HE_PHY_CAP2_MIDAMBLE_RX_TX_MAX_NSTS;
		iftype_data->he_cap.he_cap_elem.phy_cap_info[7] |=
			IEEE80211_HE_PHY_CAP7_MAX_NC_1;
+
+		/*
+		 * If antennas were forced - make sure not declaring MIMO when
+		 * we actually are SISO
+		 * Recall that there are 2 bits per stream in the "HE Tx/Rx HE
+		 * MCS NSS Support Field", so if some antenna is forced on but
+		 * not both A and B - we should work in SISO mode, so mark the
+		 * 2nd SS as not supported
+		 */
+		iftype_data->he_cap.he_mcs_nss_supp.rx_mcs_80 |=
+			cpu_to_le16(IEEE80211_HE_MCS_NOT_SUPPORTED << 2);
+		iftype_data->he_cap.he_mcs_nss_supp.tx_mcs_80 |=
+			cpu_to_le16(IEEE80211_HE_MCS_NOT_SUPPORTED << 2);
+		iftype_data->he_cap.he_mcs_nss_supp.rx_mcs_160 |=
+			cpu_to_le16(IEEE80211_HE_MCS_NOT_SUPPORTED << 2);
+		iftype_data->he_cap.he_mcs_nss_supp.tx_mcs_160 |=
+			cpu_to_le16(IEEE80211_HE_MCS_NOT_SUPPORTED << 2);
+		iftype_data->he_cap.he_mcs_nss_supp.rx_mcs_80p80 |=
+			cpu_to_le16(IEEE80211_HE_MCS_NOT_SUPPORTED << 2);
+		iftype_data->he_cap.he_mcs_nss_supp.tx_mcs_80p80 |=
+			cpu_to_le16(IEEE80211_HE_MCS_NOT_SUPPORTED << 2);
+
	}

	switch (CSR_HW_RFID_TYPE(trans->hw_rf_id)) {
@@ -745,9 +767,6 @@ static void iwl_init_he_hw_capab(struct iwl_trans *trans,
	struct ieee80211_sband_iftype_data *iftype_data;
	int i;

-	/* should only initialize once */
-	if (WARN_ON(sband->iftype_data))
-		return;

	BUILD_BUG_ON(sizeof(data->iftd.low) != sizeof(iwl_he_capa));
	BUILD_BUG_ON(sizeof(data->iftd.high) != sizeof(iwl_he_capa));
@@ -788,8 +807,10 @@ static bool iwl_he_mcs_greater(u16 a, u16 b)
	return false;
 }

-static void iwl_init_he_override(struct iwl_trans *trans,
-				 struct ieee80211_supported_band *sband)
+void iwl_init_he_override(struct iwl_trans *trans,
+			  struct iwl_nvm_data *data,
+			  struct ieee80211_supported_band *sband,
+			  u8 tx_chains, u8 rx_chains)
 {
	struct ieee80211_sband_iftype_data *iftype_data;
	int i;
@@ -839,30 +860,6 @@ static void iwl_init_he_override(struct iwl_trans *trans,
					cpu_to_le16(trans->dbg_cfg.tx_mcs_160);
		}

-		/*
-		 * If antennas were forced - make sure not declaring MIMO when
-		 * we actually are SISO
-		 * Recall that there are 2 bits per stream in the "HE Tx/Rx HE
-		 * MCS NSS Support Field", so if some antenna is forced on but
-		 * not both A and B - we should work in SISO mode, so mark the
-		 * 2nd SS as not supported
-		 */
-		if (trans->dbg_cfg.valid_ants &&
-		    (trans->dbg_cfg.valid_ants & ANT_AB) != ANT_AB) {
-			iftype_data->he_cap.he_mcs_nss_supp.rx_mcs_80 |=
-				cpu_to_le16(IEEE80211_HE_MCS_NOT_SUPPORTED << 2);
-			iftype_data->he_cap.he_mcs_nss_supp.tx_mcs_80 |=
-				cpu_to_le16(IEEE80211_HE_MCS_NOT_SUPPORTED << 2);
-			iftype_data->he_cap.he_mcs_nss_supp.rx_mcs_160 |=
-				cpu_to_le16(IEEE80211_HE_MCS_NOT_SUPPORTED << 2);
-			iftype_data->he_cap.he_mcs_nss_supp.tx_mcs_160 |=
-				cpu_to_le16(IEEE80211_HE_MCS_NOT_SUPPORTED << 2);
-			iftype_data->he_cap.he_mcs_nss_supp.rx_mcs_80p80 |=
-				cpu_to_le16(IEEE80211_HE_MCS_NOT_SUPPORTED << 2);
-			iftype_data->he_cap.he_mcs_nss_supp.tx_mcs_80p80 |=
-				cpu_to_le16(IEEE80211_HE_MCS_NOT_SUPPORTED << 2);
-		}
-
		if (trans->dbg_cfg.ack_en & 0x1)
			iftype_data->he_cap.he_cap_elem.mac_cap_info[2] |=
				IEEE80211_HE_MAC_CAP2_ACK_EN;
@@ -919,11 +916,54 @@ static void iwl_init_he_override(struct iwl_trans *trans,
 }
 #endif

-static void iwl_init_sbands(struct iwl_trans *trans,
-			    struct iwl_nvm_data *data,
-			    const void *nvm_ch_flags, u8 tx_chains,
-			    u8 rx_chains, u32 sbands_flags, bool v4,
-			    const struct iwl_fw *fw)
+void iwl_reinit_capab(struct iwl_trans *trans,
+		      struct iwl_nvm_data *data,
+		      u8 tx_chains, u8 rx_chains,
+		      const struct iwl_fw *fw)
+{
+	struct ieee80211_supported_band *sband;
+
+	sband = &data->bands[NL80211_BAND_2GHZ];
+	iwl_init_ht_hw_capab(trans, data, &sband->ht_cap, NL80211_BAND_2GHZ,
+			     tx_chains, rx_chains);
+
+	if (data->sku_cap_11ax_enable && !iwlwifi_mod_params.disable_11ax) {
+		iwl_init_he_hw_capab(trans, data, sband, tx_chains, rx_chains, fw);
+#ifdef CONFIG_IWLWIFI_SUPPORT_DEBUG_OVERRIDES
+		iwl_init_he_override(trans, data, sband, tx_chains, rx_chains);
+#endif
+	}
+	else {
+		sband->iftype_data = NULL;
+	}
+
+	sband = &data->bands[NL80211_BAND_5GHZ];
+	iwl_init_ht_hw_capab(trans, data, &sband->ht_cap, NL80211_BAND_5GHZ,
+			     tx_chains, rx_chains);
+	if (data->sku_cap_11ac_enable && !iwlwifi_mod_params.disable_11ac)
+		iwl_init_vht_hw_capab(trans, data, &sband->vht_cap,
+				      tx_chains, rx_chains);
+	else
+		sband->vht_cap.vht_supported = false;
+
+	if (data->sku_cap_11ax_enable && !iwlwifi_mod_params.disable_11ax) {
+		iwl_init_he_hw_capab(trans, data, sband, tx_chains, rx_chains, fw);
+
+#ifdef CONFIG_IWLWIFI_SUPPORT_DEBUG_OVERRIDES
+		iwl_init_he_override(trans, data, sband, tx_chains, rx_chains);
+#endif
+	}
+	else {
+		sband->iftype_data = NULL;
+	}
+}
+IWL_EXPORT_SYMBOL(iwl_reinit_capab);
+
+void iwl_init_sbands(struct iwl_trans *trans,
+		     struct iwl_nvm_data *data,
+		     const void *nvm_ch_flags, u8 tx_chains,
+		     u8 rx_chains, u32 sbands_flags, bool v4,
+		     const struct iwl_fw *fw)
 {
	struct device *dev = trans->dev;
	const struct iwl_cfg *cfg = trans->cfg;
@@ -1356,8 +1396,8 @@ iwl_parse_nvm_data(struct iwl_trans *trans, const struct iwl_cfg *cfg,
	data->calib_version = 255;

 #ifdef CONFIG_OOT_IWLWIFI_SUPPORT_DEBUG_OVERRIDES
-	iwl_init_he_override(trans, &data->bands[NL80211_BAND_2GHZ]);
-	iwl_init_he_override(trans, &data->bands[NL80211_BAND_5GHZ]);
+	iwl_init_he_override(trans, data, &data->bands[NL80211_BAND_2GHZ], tx_chains, rx_chains);
+	iwl_init_he_override(trans, data, &data->bands[NL80211_BAND_5GHZ], tx_chains, rx_chains);
 #endif
	return data;
 }
@@ -1793,6 +1833,8 @@ struct iwl_nvm_data *iwl_get_nvm(struct iwl_trans *trans,
			     IWL_UCODE_TLV_API_REGULATORY_NVM_INFO);
	size_t rsp_size = v4 ? sizeof(*rsp) : sizeof(*rsp_v3);
	void *channel_profile;
+	int tx_chains;
+	int rx_chains;

	ret = iwl_trans_send_cmd(trans, &hcmd);
	if (ret)
@@ -1877,14 +1919,17 @@ struct iwl_nvm_data *iwl_get_nvm(struct iwl_trans *trans,
	channel_profile = v4 ? (void *)rsp->regulatory.channel_profile :
			  (void *)rsp_v3->regulatory.channel_profile;

+	rx_chains = nvm->valid_rx_ant & fw->valid_rx_ant;
+	tx_chains = nvm->valid_tx_ant & fw->valid_tx_ant;
+
	iwl_init_sbands(trans, nvm, channel_profile,
-			nvm->valid_tx_ant & fw->valid_tx_ant,
-			nvm->valid_rx_ant & fw->valid_rx_ant,
+			tx_chains,
+			rx_chains,
			sbands_flags, v4, fw);

 #ifdef CONFIG_OOT_IWLWIFI_SUPPORT_DEBUG_OVERRIDES
-	iwl_init_he_override(trans, &nvm->bands[NL80211_BAND_2GHZ]);
-	iwl_init_he_override(trans, &nvm->bands[NL80211_BAND_5GHZ]);
+	iwl_init_he_override(trans, nvm, &nvm->bands[NL80211_BAND_2GHZ], tx_chains, rx_chains);
+	iwl_init_he_override(trans, nvm, &nvm->bands[NL80211_BAND_5GHZ], tx_chains, rx_chains);
 #endif
	iwl_free_resp(&hcmd);
	return nvm;
diff --git a/drivers/net/wireless/intel-oot/iwlwifi/iwl-nvm-parse.h b/drivers/net/wireless/intel-oot/iwlwifi/iwl-nvm-parse.h
index e01f7751cf113..2a0da742ade1e 100644
--- a/drivers/net/wireless/intel-oot/iwlwifi/iwl-nvm-parse.h
+++ b/drivers/net/wireless/intel-oot/iwlwifi/iwl-nvm-parse.h
@@ -89,5 +89,16 @@ struct iwl_nvm_data *
 iwl_parse_mei_nvm_data(struct iwl_trans *trans, const struct iwl_cfg *cfg,
		       const struct iwl_mei_nvm *mei_nvm,
		       const struct iwl_fw *fw);
+/**
+ * iwl_reinit_capab - Re-initialize the current HT, VHT and/or HE capabilities
+ *
+ * This should be called when changing values that affect the capabilities, such
+ * as number of spatial streams.
+ */
+void iwl_reinit_capab(struct iwl_trans *trans,
+		      struct iwl_nvm_data *data,
+		      u8 tx_chains, u8 rx_chains,
+		      const struct iwl_fw *fw);
+

 #endif /* __iwl_nvm_parse_h__ */
diff --git a/drivers/net/wireless/intel-oot/iwlwifi/mvm/mac80211.c b/drivers/net/wireless/intel-oot/iwlwifi/mvm/mac80211.c
index 5d07b8346f751..6d1eda83828f0 100644
--- a/drivers/net/wireless/intel-oot/iwlwifi/mvm/mac80211.c
+++ b/drivers/net/wireless/intel-oot/iwlwifi/mvm/mac80211.c
@@ -375,6 +375,13 @@ iwl_mvm_op_get_antenna(struct ieee80211_hw *hw, u32 *tx_ant, u32 *rx_ant)
	return 0;
 }

+static int
+iwl_mvm_op_set_antenna(struct ieee80211_hw *hw, u32 tx_ant, u32 rx_ant)
+{
+	struct iwl_mvm *mvm = IWL_MAC80211_GET_MVM(hw);
+	return iwl_mvm_set_valid_ant(mvm, tx_ant, rx_ant);
+}
+
 int iwl_mvm_mac_setup_register(struct iwl_mvm *mvm)
 {
	struct ieee80211_hw *hw = mvm->hw;
@@ -5528,6 +5535,7 @@ const struct ieee80211_ops iwl_mvm_hw_ops = {
	.wake_tx_queue = iwl_mvm_mac_wake_tx_queue,
	.ampdu_action = iwl_mvm_mac_ampdu_action,
	.get_antenna = iwl_mvm_op_get_antenna,
+	.set_antenna = iwl_mvm_op_set_antenna,
	.start = iwl_mvm_mac_start,
	.reconfig_complete = iwl_mvm_mac_reconfig_complete,
	.stop = iwl_mvm_mac_stop,
diff --git a/drivers/net/wireless/intel-oot/iwlwifi/mvm/mvm.h b/drivers/net/wireless/intel-oot/iwlwifi/mvm/mvm.h
index f7c1a9c16fec4..7c3e08149266f 100644
--- a/drivers/net/wireless/intel-oot/iwlwifi/mvm/mvm.h
+++ b/drivers/net/wireless/intel-oot/iwlwifi/mvm/mvm.h
@@ -1652,6 +1652,8 @@ static inline u8 iwl_mvm_get_valid_rx_ant(struct iwl_mvm *mvm)
	       mvm->fw->valid_rx_ant;
 }

+int iwl_mvm_set_valid_ant(struct iwl_mvm *mvm, u32 tx_ant, u32 rx_ant);
+
 static inline void iwl_mvm_toggle_tx_ant(struct iwl_mvm *mvm, u8 *ant)
 {
	*ant = iwl_mvm_next_antenna(mvm, iwl_mvm_get_valid_tx_ant(mvm), *ant);
diff --git a/drivers/net/wireless/intel-oot/iwlwifi/mvm/utils.c b/drivers/net/wireless/intel-oot/iwlwifi/mvm/utils.c
index f1fa48a069ec5..b5232eea457dd 100644
--- a/drivers/net/wireless/intel-oot/iwlwifi/mvm/utils.c
+++ b/drivers/net/wireless/intel-oot/iwlwifi/mvm/utils.c
@@ -156,6 +156,23 @@ static const u8 fw_rate_idx_to_plcp[IWL_RATE_COUNT] = {
	IWL_DECLARE_RATE_INFO(54),
 };

+int iwl_mvm_set_valid_ant(struct iwl_mvm *mvm, u32 tx_ant, u32 rx_ant)
+{
+	if (mvm->nvm_data) {
+		mvm->nvm_data->valid_rx_ant = (rx_ant & ANT_ABC);
+		mvm->nvm_data->valid_tx_ant = (tx_ant & ANT_ABC);
+
+		iwl_reinit_capab(mvm->trans, mvm->nvm_data, mvm->nvm_data->valid_tx_ant,
+				 mvm->nvm_data->valid_rx_ant, mvm->fw);
+
+		return 0;
+	}
+	else {
+		pr_err("ERROR:  iwl-mvm-set-valid-ant:  mvm->nvm_data is NULL\n");
+		return -EINVAL;
+	}
+}
+
 int iwl_mvm_legacy_rate_to_mac80211_idx(u32 rate_n_flags,
					enum nl80211_band band)
 {
--
2.26.3
